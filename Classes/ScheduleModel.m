/**
*
*Copyright 2010 Microsoft Corp
*
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at
*
*http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*/
/**
* This code was generated by the tool 'odatagen'.
* Runtime Version:1.0
*
* Changes to this file may cause incorrect behavior and will be lost if
* the code is regenerated.
*/

#import "ScheduleModel.h"
/**
 * @interface:Schedule
 * @key:Id
 */
@implementation Schedule
	@synthesize m_Id;
	@synthesize m_Error;
	@synthesize m_Tracks;
	@synthesize m_TimeSlots;
	@synthesize m_Speakers;
	@synthesize m_Sessions;

/**
 *Method to create an instance of Schedule
 */
+ (id) CreateScheduleWithid:(NSString *)Id
{
	Schedule *schedule = [[Schedule alloc]init];
	schedule.m_Id = Id;
	return schedule;
}
/**
 * Initialising object for Schedule
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Tracks" forKey:@"Tracks"];
		[m_OData_entityMap setObject:@"TimeSlots" forKey:@"TimeSlots"];
		[m_OData_entityMap setObject:@"Speakers" forKey:@"Speakers"];
		[m_OData_entityMap setObject:@"Sessions" forKey:@"Sessions"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Error"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"Schedule_Tracks" forKey:@"Tracks"];
		[m_OData_entityFKRelation setObject:@"Schedule_TimeSlots" forKey:@"TimeSlots"];
		[m_OData_entityFKRelation setObject:@"Schedule_Speakers" forKey:@"Speakers"];
		[m_OData_entityFKRelation setObject:@"Schedule_Sessions" forKey:@"Sessions"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Schedule"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Schedule *)getDeepCopy
{
	Schedule *obj=[[Schedule alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setError:[self getError]];
	[obj setTracks:[self getTracks]];
	[obj setTimeSlots:[self getTimeSlots]];
	[obj setSpeakers:[self getSpeakers]];
	[obj setSessions:[self getSessions]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_Error release];
	m_Error = nil;
	
	[m_Tracks release];
	m_Tracks = nil;
	[m_TimeSlots release];
	m_TimeSlots = nil;
	[m_Speakers release];
	m_Speakers = nil;
	[m_Sessions release];
	m_Sessions = nil;
	[super dealloc];
}

@end
/**
 * @interface:Session
 * @key:SessionId
 */
@implementation Session
	@synthesize m_SessionState;
	@synthesize m_Tags;
	@synthesize m_SessionId;
	@synthesize m_TrackId;
	@synthesize m_TimeSlotId;
	@synthesize m_Code;
	@synthesize m_TwitterHashtag;
	@synthesize m_ThumbnailUrl;
	@synthesize m_ShortUrl;
	@synthesize m_Room;
	@synthesize m_StartTime;
	@synthesize m_ShortTitle;
	@synthesize m_ShortDescription;
	@synthesize m_FullTitle;
	@synthesize m_FullDescription;
	@synthesize m_Manifests;
	@synthesize m_Presenters;
	@synthesize m_DownloadableContent;
	@synthesize m_BackgroundMaterials;
	@synthesize m_RelatedSessions;

/**
 *Method to create an instance of Session
 */
+ (id) CreateSessionWithsessionid:(NSString *)SessionId timeslotid:(NSString *)TimeSlotId starttime:(NSNumber *)StartTime
{
	Session *session = [[Session alloc]init];
	session.m_SessionId = SessionId;
	session.m_TimeSlotId = TimeSlotId;
	session.m_StartTime = StartTime;
	return session;
}
/**
 * Initialising object for Session
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Manifests" forKey:@"Manifests"];
		[m_OData_entityMap setObject:@"Presenters" forKey:@"Presenters"];
		[m_OData_entityMap setObject:@"DownloadableContent" forKey:@"DownloadableContent"];
		[m_OData_entityMap setObject:@"BackgroundMaterials" forKey:@"BackgroundMaterials"];
		[m_OData_entityMap setObject:@"RelatedSessions" forKey:@"RelatedSessions"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionState"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Tags"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TrackId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TimeSlotId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Code"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TwitterHashtag"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ThumbnailUrl"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ShortUrl"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Room"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_StartTime"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ShortTitle"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ShortDescription"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FullTitle"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FullDescription"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"Session_Manifests" forKey:@"Manifests"];
		[m_OData_entityFKRelation setObject:@"Session_Presenters" forKey:@"Presenters"];
		[m_OData_entityFKRelation setObject:@"Session_DownloadableContent" forKey:@"DownloadableContent"];
		[m_OData_entityFKRelation setObject:@"Session_BackgroundMaterials" forKey:@"BackgroundMaterials"];
		[m_OData_entityFKRelation setObject:@"Session_RelatedSessions" forKey:@"RelatedSessions"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"SessionId"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Session"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Session *)getDeepCopy
{
	Session *obj=[[Session alloc]initWithUri:[self getBaseURI]];
	[obj setSessionState:[self getSessionState]];
	[obj setTags:[self getTags]];
	[obj setSessionId:[self getSessionId]];
	[obj setTrackId:[self getTrackId]];
	[obj setTimeSlotId:[self getTimeSlotId]];
	[obj setCode:[self getCode]];
	[obj setTwitterHashtag:[self getTwitterHashtag]];
	[obj setThumbnailUrl:[self getThumbnailUrl]];
	[obj setShortUrl:[self getShortUrl]];
	[obj setRoom:[self getRoom]];
	[obj setStartTime:[self getStartTime]];
	[obj setShortTitle:[self getShortTitle]];
	[obj setShortDescription:[self getShortDescription]];
	[obj setFullTitle:[self getFullTitle]];
	[obj setFullDescription:[self getFullDescription]];
	[obj setManifests:[self getManifests]];
	[obj setPresenters:[self getPresenters]];
	[obj setDownloadableContent:[self getDownloadableContent]];
	[obj setBackgroundMaterials:[self getBackgroundMaterials]];
	[obj setRelatedSessions:[self getRelatedSessions]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_SessionState release];
	m_SessionState = nil;
	[m_Tags release];
	m_Tags = nil;
	[m_SessionId release];
	m_SessionId = nil;
	[m_TrackId release];
	m_TrackId = nil;
	[m_TimeSlotId release];
	m_TimeSlotId = nil;
	[m_Code release];
	m_Code = nil;
	[m_TwitterHashtag release];
	m_TwitterHashtag = nil;
	[m_ThumbnailUrl release];
	m_ThumbnailUrl = nil;
	[m_ShortUrl release];
	m_ShortUrl = nil;
	[m_Room release];
	m_Room = nil;
	[m_StartTime release];
	m_StartTime = nil;
	[m_ShortTitle release];
	m_ShortTitle = nil;
	[m_ShortDescription release];
	m_ShortDescription = nil;
	[m_FullTitle release];
	m_FullTitle = nil;
	[m_FullDescription release];
	m_FullDescription = nil;
	
	[m_Manifests release];
	m_Manifests = nil;
	[m_Presenters release];
	m_Presenters = nil;
	[m_DownloadableContent release];
	m_DownloadableContent = nil;
	[m_BackgroundMaterials release];
	m_BackgroundMaterials = nil;
	[m_RelatedSessions release];
	m_RelatedSessions = nil;
	[super dealloc];
}

@end
/**
 * @interface:Track
 * @key:Name
 */
@implementation Track
	@synthesize m_Name;
	@synthesize m_Title;

/**
 *Method to create an instance of Track
 */
+ (id) CreateTrackWithname:(NSString *)Name
{
	Track *track = [[Track alloc]init];
	track.m_Name = Name;
	return track;
}
/**
 * Initialising object for Track
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Name"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Title"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Name"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Track"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Track *)getDeepCopy
{
	Track *obj=[[Track alloc]initWithUri:[self getBaseURI]];
	[obj setName:[self getName]];
	[obj setTitle:[self getTitle]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Name release];
	m_Name = nil;
	[m_Title release];
	m_Title = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:TimeSlot
 * @key:Id
 */
@implementation TimeSlot
	@synthesize m_Duration;
	@synthesize m_Id;
	@synthesize m_Start;
	@synthesize m_StartString;
	@synthesize m_End;
	@synthesize m_EndString;

/**
 *Method to create an instance of TimeSlot
 */
+ (id) CreateTimeSlotWithid:(NSString *)Id start:(NSDate *)Start end:(NSDate *)End
{
	TimeSlot *timeslot = [[TimeSlot alloc]init];
	timeslot.m_Id = Id;
	timeslot.m_Start = Start;
	timeslot.m_End = End;
	return timeslot;
}
/**
 * Initialising object for TimeSlot
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Duration"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Start"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_StartString"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_End"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_EndString"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"TimeSlot"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(TimeSlot *)getDeepCopy
{
	TimeSlot *obj=[[TimeSlot alloc]initWithUri:[self getBaseURI]];
	[obj setDuration:[self getDuration]];
	[obj setId:[self getId]];
	[obj setStart:[self getStart]];
	[obj setStartString:[self getStartString]];
	[obj setEnd:[self getEnd]];
	[obj setEndString:[self getEndString]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Duration release];
	m_Duration = nil;
	[m_Id release];
	m_Id = nil;
	[m_Start release];
	m_Start = nil;
	[m_StartString release];
	m_StartString = nil;
	[m_End release];
	m_End = nil;
	[m_EndString release];
	m_EndString = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:Speaker
 * @key:Id
 */
@implementation Speaker
	@synthesize m_Id;
	@synthesize m_FullName;
	@synthesize m_PhotoUrl;
	@synthesize m_Bio;

/**
 *Method to create an instance of Speaker
 */
+ (id) CreateSpeakerWithid:(NSString *)Id
{
	Speaker *speaker = [[Speaker alloc]init];
	speaker.m_Id = Id;
	return speaker;
}
/**
 * Initialising object for Speaker
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FullName"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PhotoUrl"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Bio"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Speaker"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Speaker *)getDeepCopy
{
	Speaker *obj=[[Speaker alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setFullName:[self getFullName]];
	[obj setPhotoUrl:[self getPhotoUrl]];
	[obj setBio:[self getBio]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_FullName release];
	m_FullName = nil;
	[m_PhotoUrl release];
	m_PhotoUrl = nil;
	[m_Bio release];
	m_Bio = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:Manifest
 * @key:Id
 */
@implementation Manifest
	@synthesize m_Id;
	@synthesize m_Format;
	@synthesize m_Url;

/**
 *Method to create an instance of Manifest
 */
+ (id) CreateManifestWithid:(NSString *)Id
{
	Manifest *manifest = [[Manifest alloc]init];
	manifest.m_Id = Id;
	return manifest;
}
/**
 * Initialising object for Manifest
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Format"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Url"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Manifest"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Manifest *)getDeepCopy
{
	Manifest *obj=[[Manifest alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setFormat:[self getFormat]];
	[obj setUrl:[self getUrl]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_Format release];
	m_Format = nil;
	[m_Url release];
	m_Url = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:Presenter
 * @key:Id
 */
@implementation Presenter
	@synthesize m_Id;

/**
 *Method to create an instance of Presenter
 */
+ (id) CreatePresenterWithid:(NSString *)Id
{
	Presenter *presenter = [[Presenter alloc]init];
	presenter.m_Id = Id;
	return presenter;
}
/**
 * Initialising object for Presenter
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Presenter"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Presenter *)getDeepCopy
{
	Presenter *obj=[[Presenter alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:Content
 * @key:Id
 */
@implementation Content
	@synthesize m_Title;
	@synthesize m_Description;
	@synthesize m_Id;
	@synthesize m_Url;

/**
 *Method to create an instance of Content
 */
+ (id) CreateContentWithid:(NSString *)Id
{
	Content *content = [[Content alloc]init];
	content.m_Id = Id;
	return content;
}
/**
 * Initialising object for Content
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Title"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Description"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Url"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Content"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(Content *)getDeepCopy
{
	Content *obj=[[Content alloc]initWithUri:[self getBaseURI]];
	[obj setTitle:[self getTitle]];
	[obj setDescription:[self getDescription]];
	[obj setId:[self getId]];
	[obj setUrl:[self getUrl]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Title release];
	m_Title = nil;
	[m_Description release];
	m_Description = nil;
	[m_Id release];
	m_Id = nil;
	[m_Url release];
	m_Url = nil;
	
	[super dealloc];
}

@end
/**
 * @interface:RelatedSession
 * @key:SessionId
 */
@implementation RelatedSession
	@synthesize m_SessionId;

/**
 *Method to create an instance of RelatedSession
 */
+ (id) CreateRelatedSessionWithsessionid:(NSString *)SessionId
{
	RelatedSession *relatedsession = [[RelatedSession alloc]init];
	relatedsession.m_SessionId = SessionId;
	return relatedsession;
}
/**
 * Initialising object for RelatedSession
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Guid" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_SessionId"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
		[anEntityKey addObject:@"SessionId"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"RelatedSession"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(RelatedSession *)getDeepCopy
{
	RelatedSession *obj=[[RelatedSession alloc]initWithUri:[self getBaseURI]];
	[obj setSessionId:[self getSessionId]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_SessionId release];
	m_SessionId = nil;
	
	[super dealloc];
}

@end
 
/**
 * Container interface ScheduleModel, Namespace: Shared.Model
 */
@implementation ScheduleModel

	@synthesize m_OData_etag;

	@synthesize m_ScheduleOfEvents;
	@synthesize m_Sessions;
	@synthesize m_Tracks;
	@synthesize m_TimeSlots;
	@synthesize m_Speakers;
	@synthesize m_Manifests;
	@synthesize m_Presenters;
	@synthesize m_Contents;
	@synthesize m_RelatedSessions;
/**
 * The initializer for ScheduleModel accepting service URI
 */
- (id) init
{
	NSString* tmpuri =[[NSString alloc]initWithString:DEFAULT_SERVICE_URL];
	self=[self initWithUri:tmpuri credential:nil];
	[tmpuri release];
	return self;
}

- (id) initWithUri:(NSString*)anUri credential:(id)acredential
{
	NSString* tmpuri=nil;
	if([anUri length]==0)
	{
	 	tmpuri = DEFAULT_SERVICE_URL;
	}
	else
	{
		tmpuri =[NSString stringWithString:anUri];
	}
	if(![tmpuri hasSuffix:@"/"])
	{
		tmpuri=[tmpuri stringByAppendingString:@"/"];
	}

	if(self=[super initWithUri:tmpuri credentials:acredential dataServiceVersion:DataServiceVersion])
	{
		[super setServiceNamespace:@"Shared.Model"];

		NSMutableArray* tempEntities=[[NSMutableArray alloc]init];
		
		[tempEntities addObject:@"ScheduleOfEvents"];
		[tempEntities addObject:@"Sessions"];
		[tempEntities addObject:@"Tracks"];
		[tempEntities addObject:@"TimeSlots"];
		[tempEntities addObject:@"Speakers"];
		[tempEntities addObject:@"Manifests"];
		[tempEntities addObject:@"Presenters"];
		[tempEntities addObject:@"Contents"];
		[tempEntities addObject:@"RelatedSessions"];

		if([tempEntities count] > 0 )
		{
			[super setEntitiesWithArray:tempEntities];
		}
		[tempEntities release];

		NSMutableArray* tempEntitiySetKey=[[NSMutableArray alloc]init];
		
		[tempEntitiySetKey addObject:@"scheduleofevents"];
		[tempEntitiySetKey addObject:@"sessions"];
		[tempEntitiySetKey addObject:@"tracks"];
		[tempEntitiySetKey addObject:@"timeslots"];
		[tempEntitiySetKey addObject:@"speakers"];
		[tempEntitiySetKey addObject:@"manifests"];
		[tempEntitiySetKey addObject:@"presenters"];
		[tempEntitiySetKey addObject:@"contents"];
		[tempEntitiySetKey addObject:@"relatedsessions"];

		NSMutableArray* tempEntitiyTypeobj=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeobj addObject:@"Schedule"];
		[tempEntitiyTypeobj addObject:@"Session"];
		[tempEntitiyTypeobj addObject:@"Track"];
		[tempEntitiyTypeobj addObject:@"TimeSlot"];
		[tempEntitiyTypeobj addObject:@"Speaker"];
		[tempEntitiyTypeobj addObject:@"Manifest"];
		[tempEntitiyTypeobj addObject:@"Presenter"];
		[tempEntitiyTypeobj addObject:@"Content"];
		[tempEntitiyTypeobj addObject:@"RelatedSession"];

		if( ( [tempEntitiySetKey count] > 0 ) && ( [tempEntitiyTypeobj count] > 0 ) )
		{
			[super setEntitySet2TypeWithObject:tempEntitiyTypeobj forKey:tempEntitiySetKey];

		}

		[tempEntitiySetKey release];
		[ tempEntitiyTypeobj release];

		NSMutableArray* tempEntitiyTypeKey=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeKey addObject:@"schedule"];
		[tempEntitiyTypeKey addObject:@"session"];
		[tempEntitiyTypeKey addObject:@"track"];
		[tempEntitiyTypeKey addObject:@"timeslot"];
		[tempEntitiyTypeKey addObject:@"speaker"];
		[tempEntitiyTypeKey addObject:@"manifest"];
		[tempEntitiyTypeKey addObject:@"presenter"];
		[tempEntitiyTypeKey addObject:@"content"];
		[tempEntitiyTypeKey addObject:@"relatedsession"];
		NSMutableArray* tempEntitySetObj=[[NSMutableArray alloc]init];
		
		[tempEntitySetObj addObject:@"ScheduleOfEvents"];
		[tempEntitySetObj addObject:@"Sessions"];
		[tempEntitySetObj addObject:@"Tracks"];
		[tempEntitySetObj addObject:@"TimeSlots"];
		[tempEntitySetObj addObject:@"Speakers"];
		[tempEntitySetObj addObject:@"Manifests"];
		[tempEntitySetObj addObject:@"Presenters"];
		[tempEntitySetObj addObject:@"Contents"];
		[tempEntitySetObj addObject:@"RelatedSessions"];

		if( ( [tempEntitiyTypeKey count] > 0 ) && ( [tempEntitySetObj count] > 0 ) )
		{
			[super setEntityType2SetWithObject:tempEntitySetObj forKey:tempEntitiyTypeKey];

		}
    	[tempEntitiyTypeKey release];
		[tempEntitySetObj release];

		NSMutableArray* foreignKeys=[[NSMutableArray alloc]init];		
		[foreignKeys addObject:@"Schedule_Tracks"];
		[foreignKeys addObject:@"Schedule_TimeSlots"];
		[foreignKeys addObject:@"Schedule_Speakers"];
		[foreignKeys addObject:@"Schedule_Sessions"];
		[foreignKeys addObject:@"Session_Manifests"];
		[foreignKeys addObject:@"Session_Presenters"];
		[foreignKeys addObject:@"Session_DownloadableContent"];
		[foreignKeys addObject:@"Session_BackgroundMaterials"];
		[foreignKeys addObject:@"Session_RelatedSessions"];

		NSMutableArray *arrOfDictionaries=[[NSMutableArray alloc]initWithCapacity:[foreignKeys count]];

		NSMutableArray *arr;
 
		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Schedule",@"EndRole",@"Schedule",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Tracks",@"EndRole",@"Track",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Schedule",@"EndRole",@"Schedule",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"TimeSlots",@"EndRole",@"TimeSlot",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Schedule",@"EndRole",@"Schedule",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Speakers",@"EndRole",@"Speaker",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Schedule",@"EndRole",@"Schedule",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Sessions",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Manifests",@"EndRole",@"Manifest",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Presenters",@"EndRole",@"Presenter",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"DownloadableContent",@"EndRole",@"Content",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"BackgroundMaterials",@"EndRole",@"Content",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Session",@"EndRole",@"Session",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"RelatedSessions",@"EndRole",@"RelatedSession",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];

		if( ( [foreignKeys count] > 0 ) && ( [arrOfDictionaries count] > 0 ) )
		{
			[super setAssociationforObjects:arrOfDictionaries forKeys:foreignKeys];
		}
		[foreignKeys release];
		[arrOfDictionaries release];

		m_ScheduleOfEvents = [[DataServiceQuery alloc]initWithUri:@"ScheduleOfEvents" objectContext: self];
		m_Sessions = [[DataServiceQuery alloc]initWithUri:@"Sessions" objectContext: self];
		m_Tracks = [[DataServiceQuery alloc]initWithUri:@"Tracks" objectContext: self];
		m_TimeSlots = [[DataServiceQuery alloc]initWithUri:@"TimeSlots" objectContext: self];
		m_Speakers = [[DataServiceQuery alloc]initWithUri:@"Speakers" objectContext: self];
		m_Manifests = [[DataServiceQuery alloc]initWithUri:@"Manifests" objectContext: self];
		m_Presenters = [[DataServiceQuery alloc]initWithUri:@"Presenters" objectContext: self];
		m_Contents = [[DataServiceQuery alloc]initWithUri:@"Contents" objectContext: self];
		m_RelatedSessions = [[DataServiceQuery alloc]initWithUri:@"RelatedSessions" objectContext: self];
		
	}
	return self;
}


/**
 * Method returns DataServiceQuery reference for
 * the entityset ScheduleOfEvents
 */
- (id) scheduleofevents
{
	[self.m_ScheduleOfEvents clearAllOptions];
	return self.m_ScheduleOfEvents;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Sessions
 */
- (id) sessions
{
	[self.m_Sessions clearAllOptions];
	return self.m_Sessions;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Tracks
 */
- (id) tracks
{
	[self.m_Tracks clearAllOptions];
	return self.m_Tracks;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset TimeSlots
 */
- (id) timeslots
{
	[self.m_TimeSlots clearAllOptions];
	return self.m_TimeSlots;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Speakers
 */
- (id) speakers
{
	[self.m_Speakers clearAllOptions];
	return self.m_Speakers;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Manifests
 */
- (id) manifests
{
	[self.m_Manifests clearAllOptions];
	return self.m_Manifests;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Presenters
 */
- (id) presenters
{
	[self.m_Presenters clearAllOptions];
	return self.m_Presenters;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Contents
 */
- (id) contents
{
	[self.m_Contents clearAllOptions];
	return self.m_Contents;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset RelatedSessions
 */
- (id) relatedsessions
{
	[self.m_RelatedSessions clearAllOptions];
	return self.m_RelatedSessions;
}

/**
 * Methods for adding object to the entityset/collection
 */

- (void) addToScheduleOfEvents:(id)anObject
{
	[super addObject:@"ScheduleOfEvents" object:anObject];
}

- (void) addToSessions:(id)anObject
{
	[super addObject:@"Sessions" object:anObject];
}

- (void) addToTracks:(id)anObject
{
	[super addObject:@"Tracks" object:anObject];
}

- (void) addToTimeSlots:(id)anObject
{
	[super addObject:@"TimeSlots" object:anObject];
}

- (void) addToSpeakers:(id)anObject
{
	[super addObject:@"Speakers" object:anObject];
}

- (void) addToManifests:(id)anObject
{
	[super addObject:@"Manifests" object:anObject];
}

- (void) addToPresenters:(id)anObject
{
	[super addObject:@"Presenters" object:anObject];
}

- (void) addToContents:(id)anObject
{
	[super addObject:@"Contents" object:anObject];
}

- (void) addToRelatedSessions:(id)anObject
{
	[super addObject:@"RelatedSessions" object:anObject];
}

- (void) dealloc
{
	[ m_OData_etag release];
	m_OData_etag = nil;
	
	[m_ScheduleOfEvents release];
	m_ScheduleOfEvents = nil;
	[m_Sessions release];
	m_Sessions = nil;
	[m_Tracks release];
	m_Tracks = nil;
	[m_TimeSlots release];
	m_TimeSlots = nil;
	[m_Speakers release];
	m_Speakers = nil;
	[m_Manifests release];
	m_Manifests = nil;
	[m_Presenters release];
	m_Presenters = nil;
	[m_Contents release];
	m_Contents = nil;
	[m_RelatedSessions release];
	m_RelatedSessions = nil;

	[super dealloc];
}

@end
